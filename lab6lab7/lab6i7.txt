pg_restore.exe -h localhost -p 5432 -U postgres -d lab6 "C:\Users\gosia\Desktop\bdp\postgis_raster.backup"

ALTER SCHEMA schema_name RENAME TO serwanska;

raster2pgsql.exe -s 3763 -N -32767 -t 100x100 -I -C -M -d "C:\Users\gosia\Desktop\bdp\srtm_1arc_v3.tif" rasters.dem | psql -d lab6 -h localhost -U postgres -p 5432

raster2pgsql.exe -s 3763 -N -32767 -t 128x128 -I -C -M -d "C:\Users\gosia\Desktop\bdp\Landsat8_L1TP_RGBN.TIF" rasters.landsat8 | psql -d lab6 -h localhost -U postgres -p 5432

SELECT * FROM public.raster_columns

--tworzenie rastrow z istniejacych rastrow i interakcja z wektorami

--przyklad1
CREATE TABLE serwanska.intersects AS 
SELECT a.rast, b.municipality
FROM rasters.dem AS a, vectors.porto_parishes AS b 
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';

alter table serwanska.intersects
add column rid SERIAL PRIMARY KEY;

CREATE INDEX idx_intersects_rast_gist ON serwanska.intersects
USING gist (ST_ConvexHull(rast));

-- schema::name table_name::name raster_column::name
SELECT AddRasterConstraints('serwanska'::name, 
'intersects'::name,'rast'::name);

--przyklad2
CREATE TABLE serwanska.clip AS 
SELECT ST_Clip(a.rast, b.geom, true), b.municipality 
FROM rasters.dem AS a, vectors.porto_parishes AS b 
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality like 'PORTO';

--przyklad3
CREATE TABLE serwanska.union AS 
SELECT ST_Union(ST_Clip(a.rast, b.geom, true))
FROM rasters.dem AS a, vectors.porto_parishes AS b 
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast);

--tworzenie rastrow z wektorow

--przyklad1
CREATE TABLE serwanska.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem 
LIMIT 1
)
SELECT ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

--przyklad2

DROP TABLE serwanska.porto_parishes; --> drop table porto_parishes first
CREATE TABLE serwanska.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem 
LIMIT 1
)
SELECT st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-32767)) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

--przyklad3
DROP TABLE serwanska.porto_parishes; --> drop table porto_parishes first
CREATE TABLE serwanska.porto_parishes AS
WITH r AS (
SELECT rast FROM rasters.dem 
LIMIT 1 )
SELECT st_tile(st_union(ST_AsRaster(a.geom,r.rast,'8BUI',a.id,-
32767)),128,128,true,-32767) AS rast
FROM vectors.porto_parishes AS a, r
WHERE a.municipality ilike 'porto';

--konwertowanie rastrow na wektory

--przyklad1
create table serwanska.intersection as 
SELECT 
a.rid,(ST_Intersection(b.geom,a.rast)).geom,(ST_Intersection(b.geom,a.rast)
).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b 
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--przyklad2
CREATE TABLE serwanska.dumppolygons AS
SELECT 
a.rid,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).geom,(ST_DumpAsPolygons(ST_Clip(a.rast,b.geom))).val
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b 
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--analiza rastrow

--przyklad1
CREATE TABLE serwanska.landsat_nir AS
SELECT rid, ST_Band(rast,4) AS rast
FROM rasters.landsat8;

--przyklad2
CREATE TABLE serwanska.paranhos_dem AS
SELECT a.rid,ST_Clip(a.rast, b.geom,true) as rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.parish ilike 'paranhos' and ST_Intersects(b.geom,a.rast);

--przyklad3
CREATE TABLE serwanska.paranhos_slope AS
SELECT a.rid,ST_Slope(a.rast,1,'32BF','PERCENTAGE') as rast
FROM serwanska.paranhos_dem AS a;

--przyklad4
CREATE TABLE serwanska.paranhos_slope_reclass AS
SELECT a.rid,ST_Reclass(a.rast,1,']0-15]:1, (15-30]:2, (30-9999:3', 
'32BF',0)
FROM serwanska.paranhos_slope AS a;

--przyklad5
SELECT st_summarystats(a.rast) AS stats
FROM serwanska.paranhos_dem AS a;

--przyklad6
SELECT st_summarystats(ST_Union(a.rast))
FROM serwanska.paranhos_dem AS a;

--przyklad7
WITH t AS (
SELECT st_summarystats(ST_Union(a.rast)) AS stats
FROM serwanska.paranhos_dem AS a
)
SELECT (stats).min,(stats).max,(stats).mean FROM t;

--przyklad8
WITH t AS (
SELECT b.parish AS parish, st_summarystats(ST_Union(ST_Clip(a.rast, 
b.geom,true))) AS stats
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
group by b.parish
)
SELECT parish,(stats).min,(stats).max,(stats).mean FROM t;

--przyklad9
SELECT b.name,st_value(a.rast,(ST_Dump(b.geom)).geom)
FROM 
rasters.dem a, vectors.places AS b
WHERE ST_Intersects(a.rast,b.geom)
ORDER BY b.name;

--przyklad10
create table serwanska.tpi30 as
select ST_TPI(a.rast,1) as rast
from rasters.dem a;

CREATE INDEX idx_tpi30_rast_gist ON serwanska.tpi30
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('serwanska'::name, 
'tpi30'::name,'rast'::name);

--przyklad10 tylko dla porto
CREATE TABLE serwanska.tpi30_porto AS
SELECT ST_TPI(a.rast,1) AS rast
FROM rasters.dem AS a, vectors.porto_parishes AS b
WHERE ST_Intersects(a.rast, b.geom) AND b.municipality ilike 'porto';

--algebra map

--przyklad1
CREATE TABLE serwanska.porto_ndvi AS 
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, 1,
r.rast, 4,
'([rast2.val] - [rast1.val]) / ([rast2.val] + 
[rast1.val])::float','32BF'
) AS rast
FROM r;

CREATE INDEX idx_porto_ndvi_rast_gist ON serwanska.porto_ndvi
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('serwanska'::name, 
'porto_ndvi'::name,'rast'::name);

--przyklad2
create or replace function serwanska.ndvi(
value double precision [] [] [], 
pos integer [][],
VARIADIC userargs text []
)
RETURNS double precision AS
$$
BEGIN
--RAISE NOTICE 'Pixel Value: %', value [1][1][1];-->For debug purposes
RETURN (value [2][1][1] - value [1][1][1])/(value [2][1][1]+value 
[1][1][1]); --> NDVI calculation!
END;
$$
LANGUAGE 'plpgsql' IMMUTABLE COST 1000;

CREATE TABLE serwanska.porto_ndvi2 AS 
WITH r AS (
SELECT a.rid,ST_Clip(a.rast, b.geom,true) AS rast
FROM rasters.landsat8 AS a, vectors.porto_parishes AS b
WHERE b.municipality ilike 'porto' and ST_Intersects(b.geom,a.rast)
)
SELECT
r.rid,ST_MapAlgebra(
r.rast, ARRAY[1,4],
'serwanska.ndvi(double precision[], 
integer[],text[])'::regprocedure, --> This is the function!
'32BF'::text
) AS rast
FROM r;

CREATE INDEX idx_porto_ndvi2_rast_gist ON serwanska.porto_ndvi2
USING gist (ST_ConvexHull(rast));

SELECT AddRasterConstraints('serwanska'::name, 
'porto_ndvi2'::name,'rast'::name);

--eksport danych

--przyklad1
SELECT ST_AsTiff(ST_Union(rast))
FROM serwanska.porto_ndvi;

--przyklad2
SELECT ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE', 
'PREDICTOR=2', 'PZLEVEL=9'])
FROM serwanska.porto_ndvi;

SELECT ST_GDALDrivers();

--przyklad3

CREATE TABLE tmp_out AS
SELECT lo_from_bytea(0,
 ST_AsGDALRaster(ST_Union(rast), 'GTiff', ARRAY['COMPRESS=DEFLATE', 
'PREDICTOR=2', 'PZLEVEL=9'])
 ) AS loid
FROM serwanska.porto_ndvi;

SELECT lo_export(loid, 'C:\Users\gosia\Desktop\bdp\myraster.tiff')
FROM tmp_out;

SELECT lo_unlink(loid)
FROM tmp_out; 


